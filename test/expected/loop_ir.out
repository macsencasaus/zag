; Zag Readable Intermediate Representation
; Function header formatted as:
; @func[<max-stack-size>](<param-type>,...)

extern @printf(ptr) i32

@loop[8]() i32:
    %s[0] = i32 0
.L0:
    %s[4] = slt i32 %s[0], i32 1000
    jmpz .L1, i32 %s[4]
    %s[0] = add i32 %s[0], i32 1
    jmp .L0
.L1:
    ret i32 %s[0]

@loop_break[8]() i32:
    %s[0] = i32 0
.L2:
    %s[4] = slt i32 %s[0], i32 1000
    jmpz .L3, i32 %s[4]
    %s[0] = add i32 %s[0], i32 1
    %s[4] = eq i32 %s[0], i32 500
    jmpz .L4, i32 %s[4]
    jmp .L3
.L4:
    jmp .L2
.L3:
    ret i32 %s[0]

@loop_continue[16]() i64:
    %s[0] = i64 0
.L5:
    %s[8] = slt i64 %s[0], i64 1000
    jmpz .L6, i64 %s[8]
    %s[0] = add i64 %s[0], i64 1
    %s[8] = sgt i64 %s[0], i64 500
    jmpz .L7, i64 %s[8]
    jmp .L5
.L7:
    %s[0] = add i64 %s[0], i64 1
    jmp .L5
.L6:
    ret i64 %s[0]

@count_down[12]() i32:
    %s[0] = i32 10
    %s[4] = i32 0
.L8:
    %s[8] = sgt i32 %s[0], i32 0
    jmpz .L9, i32 %s[8]
    %s[8] = add i32 %s[4], i32 %s[0]
    %s[4] = i32 %s[8]
    %s[0] = sub i32 %s[0], i32 1
    jmp .L8
.L9:
    ret i32 %s[4]

@nested_loop[16]() i32:
    %s[0] = i32 0
    %s[4] = i32 0
.L10:
    %s[8] = slt i32 %s[0], i32 3
    jmpz .L11, i32 %s[8]
    %s[8] = i32 0
.L12:
    %s[12] = slt i32 %s[8], i32 3
    jmpz .L13, i32 %s[12]
    %s[12] = add i32 %s[4], i32 1
    %s[4] = i32 %s[12]
    %s[8] = add i32 %s[8], i32 1
    jmp .L12
.L13:
    %s[0] = add i32 %s[0], i32 1
    jmp .L10
.L11:
    ret i32 %s[4]

@empty_loop[8]() i32:
    %s[0] = i32 0
.L14:
    %s[4] = slt i32 %s[0], i32 100
    jmpz .L15, i32 %s[4]
    %s[0] = add i32 %s[0], i32 1
    jmp .L14
.L15:
    ret i32 123

@early_exit[8]() i32:
    %s[0] = i32 0
.L16:
    jmpz .L17, i32 1
    %s[0] = add i32 %s[0], i32 1
    %s[4] = eq i32 %s[0], i32 42
    jmpz .L18, i32 %s[4]
    ret i32 %s[0]
.L18:
    jmp .L16
.L17:
    ret i32 -1

@main[24]() i32:
    %s[8] = ref i8 %data[0]
    %s[16] = i32 call @loop()
    %s[0] = i32 call @printf(ptr %s[8], i32 %s[16])
    %s[8] = ref i8 %data[13]
    %s[16] = i32 call @loop_break()
    %s[0] = i32 call @printf(ptr %s[8], i32 %s[16])
    %s[8] = ref i8 %data[32]
    %s[16] = i64 call @loop_continue()
    %s[0] = i32 call @printf(ptr %s[8], i64 %s[16])
    %s[8] = ref i8 %data[55]
    %s[16] = i32 call @count_down()
    %s[0] = i32 call @printf(ptr %s[8], i32 %s[16])
    %s[8] = ref i8 %data[74]
    %s[16] = i32 call @nested_loop()
    %s[0] = i32 call @printf(ptr %s[8], i32 %s[16])
    %s[8] = ref i8 %data[94]
    %s[16] = i32 call @empty_loop()
    %s[0] = i32 call @printf(ptr %s[8], i32 %s[16])
    %s[8] = ref i8 %data[113]
    %s[16] = i32 call @early_exit()
    %s[0] = i32 call @printf(ptr %s[8], i32 %s[16])
    ret i32 0


Data:
  0: 6C 6F 6F 70 28 29 20 3D 20 25 64  A          loop().=.%d.
  c:  0 6C 6F 6F 70 5F 62 72 65 61 6B 28          .loop_break(
 18: 29 20 3D 20 25 64  A  0 6C 6F 6F 70          ).=.%d..loop
 24: 5F 63 6F 6E 74 69 6E 75 65 28 29 20          _continue().
 30: 3D 20 25 6C 64  A  0 63 6F 75 6E 74          =.%ld..count
 3c: 5F 64 6F 77 6E 28 29 20 3D 20 25 64          _down().=.%d
 48:  A  0 6E 65 73 74 65 64 5F 6C 6F 6F          ..nested_loo
 54: 70 28 29 20 3D 20 25 64  A  0 65 6D          p().=.%d..em
 60: 70 74 79 5F 6C 6F 6F 70 28 29 20 3D          pty_loop().=
 6c: 20 25 64  A  0 65 61 72 6C 79 5F 65          .%d..early_e
 78: 78 69 74 28 29 20 3D 20 25 64  A  0          
