extern: extern at 3:1 in tests/calls.zag
fn: fn at 3:8 in tests/calls.zag
identifier: printf at 3:11 in tests/calls.zag
'(': ( at 3:17 in tests/calls.zag
identifier: fmt at 3:18 in tests/calls.zag
':': : at 3:21 in tests/calls.zag
'*': * at 3:23 in tests/calls.zag
identifier: u8 at 3:24 in tests/calls.zag
',': , at 3:26 in tests/calls.zag
'...': ... at 3:28 in tests/calls.zag
')': ) at 3:31 in tests/calls.zag
identifier: i32 at 3:33 in tests/calls.zag
';': ; at 3:36 in tests/calls.zag
fn: fn at 5:1 in tests/calls.zag
identifier: id at 5:4 in tests/calls.zag
'(': ( at 5:6 in tests/calls.zag
identifier: x at 5:7 in tests/calls.zag
':': : at 5:8 in tests/calls.zag
identifier: i32 at 5:10 in tests/calls.zag
')': ) at 5:13 in tests/calls.zag
identifier: i32 at 5:15 in tests/calls.zag
'{': { at 5:19 in tests/calls.zag
return: return at 6:5 in tests/calls.zag
identifier: x at 6:12 in tests/calls.zag
';': ; at 6:13 in tests/calls.zag
'}': } at 7:1 in tests/calls.zag
fn: fn at 9:1 in tests/calls.zag
identifier: call_id at 9:4 in tests/calls.zag
'(': ( at 9:11 in tests/calls.zag
identifier: x at 9:12 in tests/calls.zag
':': : at 9:13 in tests/calls.zag
identifier: i32 at 9:15 in tests/calls.zag
')': ) at 9:18 in tests/calls.zag
identifier: i32 at 9:20 in tests/calls.zag
'{': { at 9:24 in tests/calls.zag
return: return at 10:5 in tests/calls.zag
identifier: id at 10:12 in tests/calls.zag
'(': ( at 10:14 in tests/calls.zag
identifier: x at 10:15 in tests/calls.zag
')': ) at 10:16 in tests/calls.zag
';': ; at 10:17 in tests/calls.zag
'}': } at 11:1 in tests/calls.zag
fn: fn at 13:1 in tests/calls.zag
identifier: factorial at 13:4 in tests/calls.zag
'(': ( at 13:13 in tests/calls.zag
identifier: n at 13:14 in tests/calls.zag
':': : at 13:15 in tests/calls.zag
identifier: u32 at 13:17 in tests/calls.zag
')': ) at 13:20 in tests/calls.zag
identifier: u32 at 13:22 in tests/calls.zag
'{': { at 13:26 in tests/calls.zag
if: if at 14:5 in tests/calls.zag
'(': ( at 14:8 in tests/calls.zag
identifier: n at 14:9 in tests/calls.zag
'==': == at 14:11 in tests/calls.zag
int literal: 0 at 14:14 in tests/calls.zag
')': ) at 14:15 in tests/calls.zag
return: return at 15:9 in tests/calls.zag
int literal: 1 at 15:16 in tests/calls.zag
';': ; at 15:17 in tests/calls.zag
return: return at 16:5 in tests/calls.zag
identifier: n at 16:12 in tests/calls.zag
'*': * at 16:14 in tests/calls.zag
identifier: factorial at 16:16 in tests/calls.zag
'(': ( at 16:25 in tests/calls.zag
identifier: n at 16:26 in tests/calls.zag
'-': - at 16:28 in tests/calls.zag
int literal: 1 at 16:30 in tests/calls.zag
')': ) at 16:31 in tests/calls.zag
';': ; at 16:32 in tests/calls.zag
'}': } at 17:1 in tests/calls.zag
fn: fn at 19:1 in tests/calls.zag
identifier: factorial_tail at 19:4 in tests/calls.zag
'(': ( at 19:18 in tests/calls.zag
identifier: n at 19:19 in tests/calls.zag
':': : at 19:20 in tests/calls.zag
identifier: u32 at 19:22 in tests/calls.zag
',': , at 19:25 in tests/calls.zag
identifier: res at 19:27 in tests/calls.zag
':': : at 19:30 in tests/calls.zag
identifier: u32 at 19:32 in tests/calls.zag
')': ) at 19:35 in tests/calls.zag
identifier: u32 at 19:37 in tests/calls.zag
'{': { at 19:41 in tests/calls.zag
if: if at 20:5 in tests/calls.zag
'(': ( at 20:8 in tests/calls.zag
identifier: n at 20:9 in tests/calls.zag
'==': == at 20:11 in tests/calls.zag
int literal: 0 at 20:14 in tests/calls.zag
')': ) at 20:15 in tests/calls.zag
return: return at 21:9 in tests/calls.zag
identifier: res at 21:16 in tests/calls.zag
';': ; at 21:19 in tests/calls.zag
return: return at 22:5 in tests/calls.zag
identifier: factorial_tail at 22:12 in tests/calls.zag
'(': ( at 22:26 in tests/calls.zag
identifier: n at 22:27 in tests/calls.zag
'-': - at 22:29 in tests/calls.zag
int literal: 1 at 22:31 in tests/calls.zag
',': , at 22:32 in tests/calls.zag
identifier: n at 22:34 in tests/calls.zag
'*': * at 22:36 in tests/calls.zag
identifier: res at 22:38 in tests/calls.zag
')': ) at 22:41 in tests/calls.zag
';': ; at 22:42 in tests/calls.zag
'}': } at 23:1 in tests/calls.zag
fn: fn at 25:1 in tests/calls.zag
identifier: func_ptrs at 25:4 in tests/calls.zag
'(': ( at 25:13 in tests/calls.zag
identifier: func at 25:14 in tests/calls.zag
':': : at 25:18 in tests/calls.zag
fn: fn at 25:20 in tests/calls.zag
'(': ( at 25:22 in tests/calls.zag
identifier: i32 at 25:23 in tests/calls.zag
')': ) at 25:26 in tests/calls.zag
identifier: i32 at 25:28 in tests/calls.zag
')': ) at 25:31 in tests/calls.zag
identifier: i32 at 25:33 in tests/calls.zag
'{': { at 25:37 in tests/calls.zag
return: return at 26:5 in tests/calls.zag
identifier: func at 26:12 in tests/calls.zag
'(': ( at 26:16 in tests/calls.zag
int literal: 2 at 26:17 in tests/calls.zag
')': ) at 26:18 in tests/calls.zag
';': ; at 26:19 in tests/calls.zag
'}': } at 27:1 in tests/calls.zag
fn: fn at 30:1 in tests/calls.zag
identifier: id_u8 at 30:4 in tests/calls.zag
'(': ( at 30:9 in tests/calls.zag
identifier: x at 30:10 in tests/calls.zag
':': : at 30:11 in tests/calls.zag
identifier: u8 at 30:13 in tests/calls.zag
')': ) at 30:15 in tests/calls.zag
identifier: u8 at 30:17 in tests/calls.zag
'{': { at 30:20 in tests/calls.zag
return: return at 30:22 in tests/calls.zag
identifier: x at 30:29 in tests/calls.zag
';': ; at 30:30 in tests/calls.zag
'}': } at 30:32 in tests/calls.zag
fn: fn at 31:1 in tests/calls.zag
identifier: id_i8 at 31:4 in tests/calls.zag
'(': ( at 31:9 in tests/calls.zag
identifier: x at 31:10 in tests/calls.zag
':': : at 31:11 in tests/calls.zag
identifier: i8 at 31:13 in tests/calls.zag
')': ) at 31:15 in tests/calls.zag
identifier: i8 at 31:17 in tests/calls.zag
'{': { at 31:20 in tests/calls.zag
return: return at 31:22 in tests/calls.zag
identifier: x at 31:29 in tests/calls.zag
';': ; at 31:30 in tests/calls.zag
'}': } at 31:32 in tests/calls.zag
fn: fn at 32:1 in tests/calls.zag
identifier: id_u16 at 32:4 in tests/calls.zag
'(': ( at 32:10 in tests/calls.zag
identifier: x at 32:11 in tests/calls.zag
':': : at 32:12 in tests/calls.zag
identifier: u16 at 32:14 in tests/calls.zag
')': ) at 32:17 in tests/calls.zag
identifier: u16 at 32:19 in tests/calls.zag
'{': { at 32:23 in tests/calls.zag
return: return at 32:25 in tests/calls.zag
identifier: x at 32:32 in tests/calls.zag
';': ; at 32:33 in tests/calls.zag
'}': } at 32:35 in tests/calls.zag
fn: fn at 33:1 in tests/calls.zag
identifier: id_i16 at 33:4 in tests/calls.zag
'(': ( at 33:10 in tests/calls.zag
identifier: x at 33:11 in tests/calls.zag
':': : at 33:12 in tests/calls.zag
identifier: i16 at 33:14 in tests/calls.zag
')': ) at 33:17 in tests/calls.zag
identifier: i16 at 33:19 in tests/calls.zag
'{': { at 33:23 in tests/calls.zag
return: return at 33:25 in tests/calls.zag
identifier: x at 33:32 in tests/calls.zag
';': ; at 33:33 in tests/calls.zag
'}': } at 33:35 in tests/calls.zag
fn: fn at 34:1 in tests/calls.zag
identifier: id_u32 at 34:4 in tests/calls.zag
'(': ( at 34:10 in tests/calls.zag
identifier: x at 34:11 in tests/calls.zag
':': : at 34:12 in tests/calls.zag
identifier: u32 at 34:14 in tests/calls.zag
')': ) at 34:17 in tests/calls.zag
identifier: u32 at 34:19 in tests/calls.zag
'{': { at 34:23 in tests/calls.zag
return: return at 34:25 in tests/calls.zag
identifier: x at 34:32 in tests/calls.zag
';': ; at 34:33 in tests/calls.zag
'}': } at 34:35 in tests/calls.zag
fn: fn at 35:1 in tests/calls.zag
identifier: id_i32 at 35:4 in tests/calls.zag
'(': ( at 35:10 in tests/calls.zag
identifier: x at 35:11 in tests/calls.zag
':': : at 35:12 in tests/calls.zag
identifier: i32 at 35:14 in tests/calls.zag
')': ) at 35:17 in tests/calls.zag
identifier: i32 at 35:19 in tests/calls.zag
'{': { at 35:23 in tests/calls.zag
return: return at 35:25 in tests/calls.zag
identifier: x at 35:32 in tests/calls.zag
';': ; at 35:33 in tests/calls.zag
'}': } at 35:35 in tests/calls.zag
fn: fn at 36:1 in tests/calls.zag
identifier: id_u64 at 36:4 in tests/calls.zag
'(': ( at 36:10 in tests/calls.zag
identifier: x at 36:11 in tests/calls.zag
':': : at 36:12 in tests/calls.zag
identifier: u64 at 36:14 in tests/calls.zag
')': ) at 36:17 in tests/calls.zag
identifier: u64 at 36:19 in tests/calls.zag
'{': { at 36:23 in tests/calls.zag
return: return at 36:25 in tests/calls.zag
identifier: x at 36:32 in tests/calls.zag
';': ; at 36:33 in tests/calls.zag
'}': } at 36:35 in tests/calls.zag
fn: fn at 37:1 in tests/calls.zag
identifier: id_i64 at 37:4 in tests/calls.zag
'(': ( at 37:10 in tests/calls.zag
identifier: x at 37:11 in tests/calls.zag
':': : at 37:12 in tests/calls.zag
identifier: i64 at 37:14 in tests/calls.zag
')': ) at 37:17 in tests/calls.zag
identifier: i64 at 37:19 in tests/calls.zag
'{': { at 37:23 in tests/calls.zag
return: return at 37:25 in tests/calls.zag
identifier: x at 37:32 in tests/calls.zag
';': ; at 37:33 in tests/calls.zag
'}': } at 37:35 in tests/calls.zag
fn: fn at 39:1 in tests/calls.zag
identifier: main at 39:4 in tests/calls.zag
'(': ( at 39:8 in tests/calls.zag
')': ) at 39:9 in tests/calls.zag
identifier: i32 at 39:11 in tests/calls.zag
'{': { at 39:15 in tests/calls.zag
identifier: printf at 41:5 in tests/calls.zag
'(': ( at 41:11 in tests/calls.zag
'&': & at 41:12 in tests/calls.zag
string literal: "id(42) = %d\n" at 41:13 in tests/calls.zag
',': , at 41:28 in tests/calls.zag
identifier: id at 41:30 in tests/calls.zag
'(': ( at 41:32 in tests/calls.zag
int literal: 42 at 41:33 in tests/calls.zag
')': ) at 41:35 in tests/calls.zag
')': ) at 41:36 in tests/calls.zag
';': ; at 41:37 in tests/calls.zag
identifier: printf at 42:5 in tests/calls.zag
'(': ( at 42:11 in tests/calls.zag
'&': & at 42:12 in tests/calls.zag
string literal: "call_id(13) = %d\n" at 42:13 in tests/calls.zag
',': , at 42:33 in tests/calls.zag
identifier: call_id at 42:35 in tests/calls.zag
'(': ( at 42:42 in tests/calls.zag
int literal: 13 at 42:43 in tests/calls.zag
')': ) at 42:45 in tests/calls.zag
')': ) at 42:46 in tests/calls.zag
';': ; at 42:47 in tests/calls.zag
identifier: printf at 43:5 in tests/calls.zag
'(': ( at 43:11 in tests/calls.zag
'&': & at 43:12 in tests/calls.zag
string literal: "factorial(5) = %u\n" at 43:13 in tests/calls.zag
',': , at 43:34 in tests/calls.zag
identifier: factorial at 43:36 in tests/calls.zag
'(': ( at 43:45 in tests/calls.zag
int literal: 5 at 43:46 in tests/calls.zag
')': ) at 43:47 in tests/calls.zag
')': ) at 43:48 in tests/calls.zag
';': ; at 43:49 in tests/calls.zag
identifier: printf at 44:5 in tests/calls.zag
'(': ( at 44:11 in tests/calls.zag
'&': & at 44:12 in tests/calls.zag
string literal: "factorial_tail(5, 1) = %u\n" at 44:13 in tests/calls.zag
',': , at 44:42 in tests/calls.zag
identifier: factorial_tail at 44:44 in tests/calls.zag
'(': ( at 44:58 in tests/calls.zag
int literal: 5 at 44:59 in tests/calls.zag
',': , at 44:60 in tests/calls.zag
int literal: 1 at 44:62 in tests/calls.zag
')': ) at 44:63 in tests/calls.zag
')': ) at 44:64 in tests/calls.zag
';': ; at 44:65 in tests/calls.zag
identifier: printf at 45:5 in tests/calls.zag
'(': ( at 45:11 in tests/calls.zag
'&': & at 45:12 in tests/calls.zag
string literal: "func_ptrs(id) = %d\n" at 45:13 in tests/calls.zag
',': , at 45:35 in tests/calls.zag
identifier: func_ptrs at 45:37 in tests/calls.zag
'(': ( at 45:46 in tests/calls.zag
identifier: id at 45:47 in tests/calls.zag
')': ) at 45:49 in tests/calls.zag
')': ) at 45:50 in tests/calls.zag
';': ; at 45:51 in tests/calls.zag
identifier: printf at 48:5 in tests/calls.zag
'(': ( at 48:11 in tests/calls.zag
'&': & at 48:12 in tests/calls.zag
string literal: "id_u8(255) = %u\n" at 48:13 in tests/calls.zag
',': , at 48:32 in tests/calls.zag
identifier: id_u8 at 48:34 in tests/calls.zag
'(': ( at 48:39 in tests/calls.zag
int literal: 255 at 48:40 in tests/calls.zag
')': ) at 48:43 in tests/calls.zag
')': ) at 48:44 in tests/calls.zag
';': ; at 48:45 in tests/calls.zag
identifier: printf at 49:5 in tests/calls.zag
'(': ( at 49:11 in tests/calls.zag
'&': & at 49:12 in tests/calls.zag
string literal: "id_i8(-128) = %d\n" at 49:13 in tests/calls.zag
',': , at 49:33 in tests/calls.zag
identifier: id_i8 at 49:35 in tests/calls.zag
'(': ( at 49:40 in tests/calls.zag
'-': - at 49:41 in tests/calls.zag
int literal: 128 at 49:42 in tests/calls.zag
')': ) at 49:45 in tests/calls.zag
')': ) at 49:46 in tests/calls.zag
';': ; at 49:47 in tests/calls.zag
identifier: printf at 50:5 in tests/calls.zag
'(': ( at 50:11 in tests/calls.zag
'&': & at 50:12 in tests/calls.zag
string literal: "id_u16(65535) = %u\n" at 50:13 in tests/calls.zag
',': , at 50:35 in tests/calls.zag
identifier: id_u16 at 50:37 in tests/calls.zag
'(': ( at 50:43 in tests/calls.zag
int literal: 65535 at 50:44 in tests/calls.zag
')': ) at 50:49 in tests/calls.zag
')': ) at 50:50 in tests/calls.zag
';': ; at 50:51 in tests/calls.zag
identifier: printf at 51:5 in tests/calls.zag
'(': ( at 51:11 in tests/calls.zag
'&': & at 51:12 in tests/calls.zag
string literal: "id_i16(-32768) = %d\n" at 51:13 in tests/calls.zag
',': , at 51:36 in tests/calls.zag
identifier: id_i16 at 51:38 in tests/calls.zag
'(': ( at 51:44 in tests/calls.zag
'-': - at 51:45 in tests/calls.zag
int literal: 32768 at 51:46 in tests/calls.zag
')': ) at 51:51 in tests/calls.zag
')': ) at 51:52 in tests/calls.zag
';': ; at 51:53 in tests/calls.zag
identifier: printf at 52:5 in tests/calls.zag
'(': ( at 52:11 in tests/calls.zag
'&': & at 52:12 in tests/calls.zag
string literal: "id_u32(123456789) = %u\n" at 52:13 in tests/calls.zag
',': , at 52:39 in tests/calls.zag
identifier: id_u32 at 52:41 in tests/calls.zag
'(': ( at 52:47 in tests/calls.zag
int literal: 123456789 at 52:48 in tests/calls.zag
')': ) at 52:57 in tests/calls.zag
')': ) at 52:58 in tests/calls.zag
';': ; at 52:59 in tests/calls.zag
identifier: printf at 53:5 in tests/calls.zag
'(': ( at 53:11 in tests/calls.zag
'&': & at 53:12 in tests/calls.zag
string literal: "id_i32(-123456789) = %d\n" at 53:13 in tests/calls.zag
',': , at 53:40 in tests/calls.zag
identifier: id_i32 at 53:42 in tests/calls.zag
'(': ( at 53:48 in tests/calls.zag
'-': - at 53:49 in tests/calls.zag
int literal: 123456789 at 53:50 in tests/calls.zag
')': ) at 53:59 in tests/calls.zag
')': ) at 53:60 in tests/calls.zag
';': ; at 53:61 in tests/calls.zag
identifier: printf at 54:5 in tests/calls.zag
'(': ( at 54:11 in tests/calls.zag
'&': & at 54:12 in tests/calls.zag
string literal: "id_u64(1234567890123456789) = %lu\n" at 54:13 in tests/calls.zag
',': , at 54:50 in tests/calls.zag
identifier: id_u64 at 54:52 in tests/calls.zag
'(': ( at 54:58 in tests/calls.zag
int literal: 1234567890123456789 at 54:59 in tests/calls.zag
')': ) at 54:78 in tests/calls.zag
')': ) at 54:79 in tests/calls.zag
';': ; at 54:80 in tests/calls.zag
identifier: printf at 55:5 in tests/calls.zag
'(': ( at 55:11 in tests/calls.zag
'&': & at 55:12 in tests/calls.zag
string literal: "id_i64(-1234567890123456789) = %ld\n" at 55:13 in tests/calls.zag
',': , at 55:51 in tests/calls.zag
identifier: id_i64 at 55:53 in tests/calls.zag
'(': ( at 55:59 in tests/calls.zag
'-': - at 55:60 in tests/calls.zag
int literal: 1234567890123456789 at 55:61 in tests/calls.zag
')': ) at 55:80 in tests/calls.zag
')': ) at 55:81 in tests/calls.zag
';': ; at 55:82 in tests/calls.zag
return: return at 57:5 in tests/calls.zag
int literal: 0 at 57:12 in tests/calls.zag
';': ; at 57:13 in tests/calls.zag
'}': } at 58:1 in tests/calls.zag
EOF:  at 59:1 in tests/calls.zag
