; V3 Readable Intermediate Representation
; Function header formatted as:
; func[<max-stack-size>](<size-of-param>,...)

square[8](4):
    %s[4] = mul i32 %s[0], i32 %s[0]
    ret i32 %s[4]

sum[20](4,4,4):
    %s[12] = add i32 %s[0], i32 %s[4]
    %s[16] = add i32 %s[12], i32 %s[8]
    ret i32 %s[16]

prec[24]():
    %s[0] = mul i64 2, i64 3
    %s[8] = add i64 1, i64 %s[0]
    %s[0] = i64 %s[8]
    %s[8] = div i64 1, i64 2
    %s[16] = sub i64 %s[8], i64 3
    %s[8] = i64 %s[16]
    %s[16] = mod i64 %s[0], i64 %s[8]
    ret i64 %s[16]

mismatch[8]():
    %s[0] = i32 3
    %s[4] = add i32 %s[0], i32 2
    ret i32 %s[4]

prec2[24]():
    %s[0] = mul i64 2, i64 2
    %s[8] = mul i64 3, i64 3
    %s[16] = add i64 %s[0], i64 %s[8]
    ret i64 %s[16]

prec3[24]():
    %s[0] = add i64 2, i64 3
    %s[8] = mul i64 2, i64 %s[0]
    %s[16] = mul i64 %s[8], i64 3
    ret i64 %s[16]

prefix[12]():
    %s[0] = i32 2
    %s[8] = neg i32 %s[0]
    %s[0] = i32 %s[8]
    %s[8] = lnot i32 %s[0]
    %s[0] = i32 %s[8]
    %s[8] = bnot i32 %s[0]
    %s[0] = i32 %s[8]
    %s[0] = add i32 %s[0], i32 1
    %s[8] = i32 %s[0]
    %s[0] = add i32 %s[0], i32 1
    %s[4] = i32 %s[8]
    %s[0] = sub i32 %s[0], i32 1
    %s[8] = i32 %s[0]
    %s[0] = sub i32 %s[0], i32 1
    %s[4] = i32 %s[8]
    ret i32 %s[0]

more_binops[12]():
    %s[8] = icmp lt i32 %s[0], i32 1
    %s[4] = i32 %s[8]
    %s[8] = icmp lteq i32 %s[0], i32 2
    %s[4] = i32 %s[8]
    %s[8] = icmp eq i32 %s[0], i32 3
    %s[4] = i32 %s[8]
    %s[8] = icmp neq i32 %s[0], i32 %s[4]
    %s[4] = i32 %s[8]
    %s[8] = icmp gt i32 %s[0], i32 %s[4]
    %s[4] = i32 %s[8]
    %s[8] = icmp gteq i32 %s[0], i32 %s[4]
    %s[4] = i32 %s[8]
    %s[8] = and i32 %s[0], i32 %s[4]
    %s[4] = i32 %s[8]
    %s[8] = or i32 %s[0], i32 %s[4]
    %s[4] = i32 %s[8]
    %s[8] = xor i32 %s[0], i32 %s[0]
    %s[4] = i32 %s[8]
    %s[8] = shl i32 %s[0], i32 1
    %s[4] = i32 %s[8]
    %s[8] = shr i32 %s[0], i32 1
    %s[4] = i32 %s[8]
    ret i32 0

