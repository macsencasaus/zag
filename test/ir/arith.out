; V3 Readable Intermediate Representation
; Function header formatted as:
; @func[<max-stack-size>](<param-type>,...)

@square[8](i32):
    %s[4] = imul i32 %s[0], i32 %s[0]
    ret i32 %s[4]

@sum[20](i32, i32, i32):
    %s[12] = add i32 %s[0], i32 %s[4]
    %s[16] = add i32 %s[12], i32 %s[8]
    ret i32 %s[16]

@prec[24]():
    %s[0] = imul i64 2, i64 3
    %s[8] = add i64 1, i64 %s[0]
    %s[0] = i64 %s[8]
    %s[8] = idiv i64 1, i64 2
    %s[16] = sub i64 %s[8], i64 3
    %s[8] = i64 %s[16]
    %s[16] = imod i64 %s[0], i64 %s[8]
    ret i64 %s[16]

@mismatch[8]():
    %s[0] = i32 3
    %s[4] = add i32 %s[0], i32 2
    ret i32 %s[4]

@prec2[24]():
    %s[0] = imul i64 2, i64 2
    %s[8] = imul i64 3, i64 3
    %s[16] = add i64 %s[0], i64 %s[8]
    ret i64 %s[16]

@prec3[24]():
    %s[0] = add i64 2, i64 3
    %s[8] = imul i64 2, i64 %s[0]
    %s[16] = imul i64 %s[8], i64 3
    ret i64 %s[16]

@prefix[12]():
    %s[0] = i32 2
    %s[8] = neg i32 %s[0]
    %s[0] = i32 %s[8]
    %s[8] = lnot i32 %s[0]
    %s[0] = i32 %s[8]
    %s[8] = bnot i32 %s[0]
    %s[0] = i32 %s[8]
    %s[0] = add i32 %s[0], i32 1
    %s[8] = i32 %s[0]
    %s[0] = add i32 %s[0], i32 1
    %s[4] = i32 %s[8]
    %s[0] = sub i32 %s[0], i32 1
    %s[8] = i32 %s[0]
    %s[0] = sub i32 %s[0], i32 1
    %s[4] = i32 %s[8]
    ret i32 %s[0]

@more_binops[12]():
    %s[8] = slt i32 %s[0], i32 1
    %s[4] = i32 %s[8]
    %s[8] = sle i32 %s[0], i32 2
    %s[4] = i32 %s[8]
    %s[8] = eq i32 %s[0], i32 3
    %s[4] = i32 %s[8]
    %s[8] = ne i32 %s[0], i32 %s[4]
    %s[4] = i32 %s[8]
    %s[8] = sgt i32 %s[0], i32 %s[4]
    %s[4] = i32 %s[8]
    %s[8] = sge i32 %s[0], i32 %s[4]
    %s[4] = i32 %s[8]
    %s[8] = and i32 %s[0], i32 %s[4]
    %s[4] = i32 %s[8]
    %s[8] = or i32 %s[0], i32 %s[4]
    %s[4] = i32 %s[8]
    %s[8] = xor i32 %s[0], i32 %s[0]
    %s[4] = i32 %s[8]
    %s[8] = shl i32 %s[0], i32 1
    %s[4] = i32 %s[8]
    %s[8] = ashr i32 %s[0], i32 1
    %s[4] = i32 %s[8]
    ret i32 0

